#Esto se necesita solo para bajar las cosas
import numpy as np
%config InlineBackend.rc = {}
import matplotlib
matplotlib.rc_file("../../templates/matplotlibrc")
import matplotlib.pyplot as plt
%matplotlib inline

#Desplegando imagen

from astropy.io import fits
image_file = download_file('http://data.astropy.org/tutorials/FITS-images/HorseHead.fits', cache=True )
hdu_list = fits.open(image_file)
hdu_list.info()
image_data = fits.getdata(image_file)
print(type(image_data))
print(image_data.shape)
plt.imshow(image_data, cmap='gray')
plt.colorbar()

#Opening fits
from astropy.io import fits
fits_image_filename = fits.util.get_testdata_filepath('test0.fits')

hdul = fits.open(fits_image_filename)
hdul.info()
hdul.close()

#Abriendo la imagen como handler no es neceasario cerrarla
with fits.open(fits_image_filename) as hdul:


data = hdul[1].data
#desplegando los pixeles 5,2
print(data[1, 4])

#data[30:40, 10:20]
desplegando 11 a 20 y 31 a 40

#guardando datos
hdul.writeto('newtable.fits')

with fits.open('original.fits', mode='update') as hdul:
    # Change something in hdul.
    hdul.flush()  # changes are written back to original.fits


#Substracting bias

fake_bias_data = np.random.normal(size=trimmed.shape)  # just for illustration
master_bias = CCDData(fake_bias_data, unit=u.electron,
                       mask=np.zeros(trimmed.shape))
bias_subtracted = ccdproc.subtract_bias(trimmed, master_bias)

#Substracting dark
master_dark = master_bias.multiply(0.1)  # just for illustration
master_dark.header['exposure'] = 15.0
dark_subtracted = ccdproc.subtract_dark(bias_subtracted, master_dark,
                                         exposure_time='exposure',
                                         exposure_unit=u.second,
                                         scale=True)

#flat correction
fake_flat_data = np.random.normal(loc=1.0, scale=0.05, size=trimmed.shape)
master_flat = CCDData(fake_flat_data, unit=u.electron)
reduced_image = ccdproc.flat_correct(dark_subtracted, master_flat)
#min value permite evitar la division sobre 0
reduced_image = ccdproc.flat_correct(dark_subtracted, master_flat,
                                      min_value=0.9)

#Realizando toda la correccion de imagenes con un solo comando (
ccd = CCDData(img, unit=u.adu)
ccd.header['exposure'] = 30.0  # for dark subtraction
nccd = ccdproc.ccd_process(ccd, oscan='[201:232,1:100]',
                            trim='[1:200, 1:100]',
                            error=True,
                            gain=2.0*u.electron/u.adu,
                            readnoise=5*u.electron,
                            dark_frame=master_dark,
                            exposure_key='exposure',
                            exposure_unit=u.second,
                            dark_scale=True,
                            master_flat=master_flat)
